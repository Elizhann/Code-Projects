#   this is a program that creates a GUI to take an input text file
#   perform basic text processing and write the results to an output text file
#   3/9/18: switched geometric management from pack to grid

import tkinter
import string

#   defines class to read file
class WordSearch:
    #   global variables for word lists
    counts = dict()

    # defines GUI design
    def __init__(self, window):
        self.window = window
        window.title('Word Search')
        window.iconbitmap('mlogo_NxJ_icon.ico')
        window.configure(bg = 'ivory')

        #   file input
        self.input_file_label = tkinter.Label(text = 'Enter Input File Name: ', font = "Serif 9 bold", bg = 'ivory')
        self.input_file_entry = tkinter.Entry(font = "Serif 8")
        self.input_file_label.grid(row = 0, column = 0, sticky = 'E')
        self.input_file_entry.grid(row = 0, column = 1, sticky = 'E')


        #   search
        self.search_label = tkinter.Label(text = 'Enter search term: ', font = "Serif 9 bold", bg = 'ivory')
        self.search_entry = tkinter.Entry(text = "Serif 8")
        self.search_label.grid(row = 2, column = 0, sticky = 'W')
        self.search_entry.grid(row = 2, column = 1, sticky = 'E')


        #  action buttons
        self.enter_button = tkinter.Button( text = 'Search', command = self.search, font = "Serif 9 bold", bg = 'navy', fg = 'yellow')
        self.new_search_button = tkinter.Button(text = 'Clear Search', command = self.clear_search, font = "Serif 9 bold", bg = 'navy', fg = 'yellow')
        self.exit_button = tkinter.Button(text = 'Quit', command = window.quit, font = "Serif 9 bold", bg = 'navy', fg = 'yellow')
        self.enter_button.grid(row = 3, column = 1, sticky = 'E')
        self.new_search_button.grid(row = 3, column = 2)
        self.exit_button.grid(row = 3, column = 3)

        #  results message
        self.display_label_text = tkinter.StringVar()
        self.display_label = tkinter.Label(textvariable = self.display_label_text, font = "Serif 8", bg = 'ivory')
        self.display_label.grid(row = 3, column = 0)





    #  defines function to read input file, perform basic text processing
    def read_file(self):
        self.counts.clear() #   clears dictionary to prevent false accumulations

        input_filename = self.input_file_entry.get() #   gets input file name

        try:
            openfile = open(input_filename, 'r')

            for lines in openfile:
                lines = lines.rstrip()
                lines = lines.lower()
                lines = lines.translate(lines.maketrans('', '', string.punctuation))
                words = lines.split()
                for word in words:
                    if word not in self.counts:
                        self.counts[word] = 1
                    else:
                        self.counts[word] = self.counts[word] + 1
            openfile.close()

        except FileNotFoundError:
            self.display_label_text.set('File' + ' ' + str(input_filename) + ' ' + 'not found')


    def search(self):
        self.read_file()
        query = self.search_entry.get()
        query = query.lower()
        if query in self.counts:
            results = self.counts[query]
            self.display_label_text.set(str(query) + ': ' + str(results))
        else:
            self.display_label_text.set(str(query) + ' ' + 'could not be found')

    def clear_search(self):
        self.input_file_entry.delete(0, tkinter.END)
        self.display_label_text.set(' ')
        self.search_entry.delete(0, tkinter.END)

#   calls object for class
root = tkinter.Tk()
read = WordSearch(root)
root.mainloop()

